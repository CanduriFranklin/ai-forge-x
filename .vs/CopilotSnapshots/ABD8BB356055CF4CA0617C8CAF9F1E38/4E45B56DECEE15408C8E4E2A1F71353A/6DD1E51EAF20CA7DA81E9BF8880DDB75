from flask import Flask, request, jsonify
import requests
from dotenv import load_dotenv
import os
import sys
import logging
from openai import OpenAI

# Set the PYTHONPATH environment variable to include the models directory
os.environ['PYTHONPATH'] = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'models'))

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'models')))
sys.path.append('..')

from models.explanation_model import ExplanationModel
from models.stable_diffusion import StableDiffusionModel

app = Flask(__name__)

load_dotenv()

image_api_url = os.getenv("NEBIUS_IMAGE_API")
text_api_url = os.getenv("NEBIUS_TEXT_API")

explanation_model = ExplanationModel()
stable_diffusion_model = StableDiffusionModel()

# Configure logging
logging.basicConfig(level=logging.DEBUG)

client = OpenAI(
    base_url="https://api.studio.nebius.com/v1/",
    api_key=os.environ.get("NEBIUS_API_KEY")
)

@app.route("/")
def index():
    return "Welcome to the AI Forge API!"

@app.route("/generate-image", methods=["POST"])
def generate_image():
    prompt = request.json.get("prompt")
    logging.debug(f"Received prompt: {prompt}")
    logging.debug(f"Using image API URL: {image_api_url}")
    response = requests.post(image_api_url, json={"prompt": prompt})
    logging.debug(f"External API response status: {response.status_code}")
    logging.debug(f"External API response text: {response.text}")
    try:
        response_json = response.json()
    except ValueError:
        logging.error("Invalid response from image generation API")
        return jsonify({"error": "Invalid response from image generation API"}), 500
    return jsonify(response_json)

@app.route("/generate-text", methods=["POST"])
def generate_text():
    prompt = request.json.get("prompt")
    response = requests.post(text_api_url, json={"prompt": prompt})
    return jsonify(response.json())

@app.route("/generate", methods=["POST"])
def generate():
    data = request.json
    prompt = data.get("prompt")
    model_type = data.get("model_type")

    if model_type == "text":
        result = explanation_model.generate_explanation(prompt)
    elif model_type == "image":
        result = stable_diffusion_model.generate_image(prompt)
    else:
        return jsonify({"error": "Invalid model type"}), 400

    return jsonify({"result": result})

@app.route("/generate-image-openai", methods=["POST"])
def generate_image_openai():
    prompt = request.json.get("prompt")
    response = client.images.generate(
        model="stability-ai/sdxl",
        response_format="b64_json",
        extra_body={
            "response_extension": "webp",
            "width": 1024,
            "height": 1024,
            "num_inference_steps": 30,
            "negative_prompt": "",
            "seed": -1
        },
        prompt=prompt
    )
    return jsonify(response.to_json())

if __name__ == "__main__":
    app.run(debug=True)
